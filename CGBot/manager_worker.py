import logging
import os
import datetime
from functools import partial

import telegram
from botanio import botan
from emoji import emojize
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, Updater, ConversationHandler, MessageHandler, Filters, RegexHandler

from CGBot.decorator import on_error, catch_exceptions

logger = logging.getLogger(__name__)
CODERGOSHA_ID = "295641973"
BOTAN_KEY = os.getenv('BOTAN_KEY')
users_coffee = dict()


def run_worker(telegram_token, use_webhook, webhook_domain='', webhook_port=''):
    users_state = dict()

    updater = Updater(telegram_token)
    dp = updater.dispatcher
    dp.add_error_handler(on_error)
    dp.add_handler(CommandHandler('start', partial(start),  pass_args=True))
    dp.add_handler(CommandHandler('mainmenu', partial(mainmenu, users_state=users_state)))
    dp.add_handler(RegexHandler('^–ü—Ä–æ–∫—Å–∏', partial(get_proxy, users_state=users_state)))
    dp.add_handler(RegexHandler('^–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ', partial(drink_cofee, users_state=users_state)))
    dp.add_handler(MessageHandler(Filters.all, partial(mainmenu, users_state=users_state)))

    if use_webhook:
        CERT_DIR = os.getenv('CERT_DIR')
        logger.info('Starting webhook at {}:{}'.format(webhook_domain, webhook_port))
        web_hook_url = 'https://{}:{}/{}'.format(webhook_domain, str(webhook_port), telegram_token)
        updater.start_webhook(listen='0.0.0.0', port=webhook_port, url_path=telegram_token, webhook_url=web_hook_url,
                              key=CERT_DIR + 'private.key', cert=CERT_DIR + 'cert.pem',)
    else:
        logger.info('Starting long poll')
        updater.start_polling()

    return updater


def del_state(update, users_state):
    if update.message.from_user.id in users_state:
        del users_state[update.message.from_user.id]


@catch_exceptions
def start(bot, update, args):
    utm_start = " ".join(args)
    # utm_start = args
    # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–æ–ª—Ö–æ–∑–∏—Ç—å —Å—Ç–∞—Ç–∫—É
    # https://telegram.me/MopedGoaBot?start=test_utm
    message_dic = dict()
    message_dic['source'] = utm_start
    botan.track(token=BOTAN_KEY, uid=update.message.from_user.id, message=message_dic, name="/start")

    coffee = emojize(" :coffee:", use_aliases=True)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏. \r\n –ê –µ—â–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö "
                              "@CoderGosha –∏ —Å–¥–µ–ª–∞—é –≤–∞–º –∫–æ—Ñ–µ" + coffee,
                              reply_markup=ReplyKeyboardMarkup(keyboard_mainmenu(), one_time_keyboard=True))

    return ConversationHandler.END


@catch_exceptions
def mainmenu(bot, update, users_state):
    coffee = emojize(" :coffee:", use_aliases=True)
    # update.message.reply_text(_('You have questions? Write: @CoderGosha'))
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –Ø –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏. \r\n –ê –µ—â–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö "
                              "@CoderGosha –∏ —Å–¥–µ–ª–∞—é –≤–∞–º –∫–æ—Ñ–µ" + coffee,
                              reply_markup=ReplyKeyboardMarkup(keyboard_mainmenu(), one_time_keyboard=True))
    del_state(update, users_state)
    return ConversationHandler.END


@catch_exceptions
def get_proxy(bot, update, users_state):
    message_dic = dict()
    botan.track(token=BOTAN_KEY, uid=update.message.from_user.id, message=message_dic, name="proxy")

    coffee = emojize(" :coffee:", use_aliases=True)
    url = "https://t.me/socks?server=188.166.32.209&port=1080&user=proxyuser&pass=6LB95AF795"
    # update.message.reply_text(_('You have questions? Write: @CoderGosha'))
    button_list = [InlineKeyboardButton(text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", url=url)]
    reply_markup = InlineKeyboardMarkup(build_menu(button_list, n_cols=2))
    msg = "–Ø –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –ø—Ä–æ–∫—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å. \r\n " \
          "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ @CoderGosha –∏ —É–≥–æ—Å—Ç–∏—Ç—å –µ–≥–æ –∫–æ—Ñ–µ " + coffee
    update.message.reply_text(msg,
                              reply_markup=reply_markup)
    del_state(update, users_state)
    return ConversationHandler.END


@catch_exceptions
def drink_cofee(bot, update, users_state):
    message_dic = dict()
    botan.track(token=BOTAN_KEY, uid=update.message.from_user.id, message=message_dic, name="coffee")

    coffee = emojize(" :coffee:", use_aliases=True)
    if users_coffee.get(update.message.from_user.id) is not None:
        dtT = datetime.datetime.utcnow() + datetime.timedelta(minutes=-15)
        timecofee = users_coffee.get(update.message.from_user.id)
        if timecofee > dtT:
            msg = "–û–æ–æ—É, –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ :(" + coffee
            update.message.reply_text(msg)
            return ConversationHandler.END

    msg = "–Ø –Ω–∞–ø–∏—Å–∞–ª @CoderGosha —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–∏—Ç—å —Å –Ω–∏–º –∫–æ—Ñ–µ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å—É—é –ø–æ–∑–∂–µ" + coffee
    update.message.reply_text(msg)
    link_user = '<a href="tg://user?id=' + str(update.message.from_user.id) + '"> ' +\
                str(update.message.from_user.first_name) + '</a>\r\n\r\n'

    bot.send_message(chat_id=CODERGOSHA_ID, text="–° –í–∞–º–∏ —Ö–æ—Ç—è—Ç –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ: " + link_user, parse_mode=telegram.ParseMode.HTML)
    users_coffee[update.message.from_user.id] = datetime.datetime.utcnow()

    del_state(update, users_state)
    return ConversationHandler.END


def keyboard_mainmenu():
    collab = emojize(" ‚öî", use_aliases=True)
    write = emojize(" üì©", use_aliases=True)
    project = emojize(" ‚öô", use_aliases=True)
    coffee = emojize(" :coffee:", use_aliases=True)
    keyboard = ['–ü—Ä–æ–∫—Å–∏' + collab, '–ü—Ä–æ–µ–∫—Ç—ã' + project, '–ù–∞–ø–∏—Å–∞—Ç—å –∞–≤—Ç–æ—Ä—É' + write, '–í—ã–ø–∏—Ç—å –∫–æ—Ñ–µ' +coffee]

    return build_menu(buttons=keyboard, n_cols=2, header_buttons=None, footer_buttons=None)


def build_menu(buttons,
               n_cols,
               header_buttons=None,
               footer_buttons=None):
    menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
    if header_buttons:
        menu.insert(0, header_buttons)
    if footer_buttons:
        menu.append(footer_buttons)
    return menu
